# -*- coding: utf-8 -*-
"""Primack First Draft of DA 401 Final Project Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d_pCVaHQ6NcKMt_n-tL1H1JGf0A_zxZJ

## Importing data and Pre-processing
"""

pip install pycaret -q

# Commented out IPython magic to ensure Python compatibility.
# Importing relevant packages

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor 

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder, RobustScaler, StandardScaler
from sklearn.compose import ColumnTransformer
from imblearn.pipeline import make_pipeline, Pipeline

from pycaret.regression import *

# %matplotlib inline

hitters = pd.read_excel('/content/MLB Contract Data Final Version (2) (1).xlsx')

hitters

hitters.info()

# Changing the name of the position column to avoid python issues

hitters.rename(columns={'Pos\'n':'Position'}, inplace=True)

# Filling the null values of the dataframe

for column in hitters.select_dtypes('object'):
  hitters[column].fillna('unknown', inplace=True)

hitters.info()

# Checking the number of unique players in the dataframe
print(hitters['Player'].nunique())

"""## Exploratory Data Analysis"""

hitters.columns

#@title Histogram Plot

feature = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
split_by = 'Year' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# Histogram of contracts

px.histogram(hitters.sort_values(by=split_by),
             x= feature,
             marginal='box',
             color=split_by)

#@title Mean Contract Value

# Checking Players / Agents / Club Owners associated with high value contracts

feature = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
split_by = "Player" #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# Getting the mean value of AAV

hitters_mean = hitters.groupby([split_by])[feature].mean().reset_index()
hitters_mean.sort_values(by=feature, ascending=True, inplace=True)

# Exporting the data to csv file

hitters_mean.to_csv('hitters_mean.csv')

# Bar plots

px.bar(hitters_mean,
       x= split_by,
       y= feature,
      #  hover_data=['Player', 'Year', 'Guarantee', 'Years']
       )

feature = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
split_by = "Baseball Ops head / club GM" #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# hitters.sort_values(by=feature, ascending=True, inplace=True)

fig = px.box(hitters,
       x= split_by,
       y= feature,
       hover_data=['Player', 'Year', 'Guarantee', 'Position']
       )

fig.show()

# hitters.sort_values(by='Year', ascending=True, inplace=True)

correlation_years = pd.DataFrame()

for year in hitters['Year'].unique():
  hitters_corr = pd.DataFrame(hitters[hitters['Year'] == year].corr())
  hitters_corr = pd.DataFrame(hitters_corr['Guarantee'])
  correlation_years[year] = hitters_corr['Guarantee']

correlation_years = correlation_years.transpose()

correlation_years

correlation_years.columns

feature = 'wRAA' #@param ['Year', 'Age', 'Years', 'Guarantee', 'Future WAR', 'Unnamed: 13','past WAR', 'HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP','SLG', 'OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd','wRC+', 'WPA', 'RE24', 'REW', 'Clutch']

px.bar(correlation_years,
       x=correlation_years.index,
       y=feature)

"""## Regression Model


"""

#@title Scatter Plot

y = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
x = 'past WAR' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# Scatter plots

px.scatter(hitters,
       x= x,
       y= y,
       color='Year',
       hover_data=['Player', 'Guarantee', 'Position']
       )

# Splitting data into X and Y

X = hitters.drop(columns=['Guarantee'])
y = hitters['Guarantee']

# Dropping non-relevant features

features_drop = ['Year', 'Years', 'Term', 'Player', 'Position', 'New Club', 'Player Agent', 'Club Owner', 'Old Club', 'Baseball Ops head / club GM', 'Unnamed: 13']

X.drop(columns=features_drop, inplace=True)

X

# One hot encoding categorical features using get_dummies

X_encoded = pd.get_dummies(X, drop_first=True)
# X_encoded = X.copy()

# Filling missing values with median values

for column in X_encoded.columns:
  median = X_encoded[column].median()
  X_encoded[column].fillna(median, inplace=True)

# Creating Train and test set

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=0)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Normalizing the data

for column in X_train.columns:
  X_train[column] = (X_train[column] - X_train[column].mean()) / X_train[column].std()

X_train

# Applying constant and creating the model

X_train_sm = sm.add_constant(X_train)

model = sm.OLS(y_train, X_train_sm).fit()

print(model.summary())

# Dropping statistically insignificant variables

features_drop = ['REW', 'OBP', 'OPS', 'wOBA', 'BB%', 'HR', 'WPA', 'AVG', 'Clutch', 'RE24', 'IBB', 'BB/K', 'SLG', 'ISO', 'K%']

X_train_new = X_train.drop(columns=features_drop)

# Applying a constant and creating the model

X_train_new_sm = sm.add_constant(X_train_new)

model = sm.OLS(y_train, X_train_new_sm).fit()

print(model.summary())

"""### Regression with Pycaret"""

hitters.columns

# Preparing the training data

setup(hitters, 
      target='Guarantee',
      # numeric_features = ['Years', 'HR', 'HBP', 'WP', 'W'],
      numeric_features = ['Age'],
      ignore_features = ['Player',
                         'Years',
                         'Unnamed: 13',
                         'Term'],
      normalize = True, 
      normalize_method = 'zscore',
      )

compare_models()

model = create_model('gbr')

plot_model(model, plot = 'feature')

evaluate_model(model)