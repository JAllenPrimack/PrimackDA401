# -*- coding: utf-8 -*-
"""The effect of the rise of baseball analytics on MLB Free Agency and Player Valuation Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wVPlpOKvZv9R7dLbszWdafZVZ3fNCWf8

## Importing data and pre-processing
"""

pip install pycaret -q

# Commented out IPython magic to ensure Python compatibility.
# Importing relevant packages

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor 

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder, RobustScaler, StandardScaler
from sklearn.compose import ColumnTransformer
from imblearn.pipeline import make_pipeline, Pipeline

from pycaret.regression import *

# %matplotlib inline

# Importing data
hitters = pd.read_excel('/content/MLBFreeAgentData.xlsx')

# Displaying data
hitters

# Looking at information of data
hitters.info()

# Changing the name of position column to avoid python issues

hitters.rename(columns={'Pos\'n':'Position'}, inplace=True)

# Filling in null values of the dataframe

for column in hitters.select_dtypes('object'):
  hitters[column].fillna('unknown', inplace=True)

hitters.info()

# Checking the number of unique players in the dataframe
print(hitters['Player'].nunique())

"""## Exploratory Data Analysis"""

#@title Creating a filter to filter the data by year, to observe changes over time.
#1999-2014 is defined as pre-Moneyball
#2005-2010 is defined as "post-Moneyball"
start = "1999" #@param [1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]
end = "2019" #@param [1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]

start = int(start)
end = int(end)

hitters = hitters[hitters['Year'] >= start]
hitters = hitters[hitters['Year'] <= end]

# Checking years for the analysis

hitters['Year'].unique()

hitters.columns

#@title Histograms

variable = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
split_by = 'Year' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# Histogram of contracts

px.histogram(hitters.sort_values(by=split_by),
             x= variable,
             marginal='box',
             color=split_by)

#@title Mean Contract Value

# Checking Players / Agents / Club Owners associated with high value contracts

variable = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
split_by = "Position" #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# Getting mean value of contrat amount

hitters_mean = hitters.groupby([split_by])[variable].mean().reset_index()
hitters_mean.sort_values(by=variable, ascending=True, inplace=True)

# Exporting data to a csv file

hitters_mean.to_csv('hitters_mean.csv')

# Bar plots

px.bar(hitters_mean,
       x= split_by,
       y= variable,
      #  hover_data=['Player', 'Year', 'Guarantee', 'Years']
       )

variable = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
split_by = "Position" #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# hitters.sort_values(by=variable, ascending=True, inplace=True)

fig = px.box(hitters,
       x= split_by,
       y= variable,
       hover_data=['Player', 'Year', 'Guarantee', 'Position']
       )

fig.show()

# hitters.sort_values(by='Year', ascending=True, inplace=True)

#Analyzing the correlations of performance statistics to free agents pay (Guarantee). Guarantee can be replaced with 'Future WAR' to analyze the correlations of the variables with future performance.
correlation_years = pd.DataFrame()

for year in hitters['Year'].unique():
  hitters_corr = pd.DataFrame(hitters[hitters['Year'] == year].corr())
  hitters_corr = pd.DataFrame(hitters_corr['Guarantee'])
  correlation_years[year] = hitters_corr['Guarantee']

correlation_years = correlation_years.transpose()

correlation_years

correlation_years.columns

#Generating correlation plots
variable = 'wRC+' #@param ['Year', 'Age', 'Years', 'Guarantee', 'Future WAR', 'Unnamed: 13','past WAR', 'HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP','SLG', 'OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd','wRC+', 'WPA', 'RE24', 'REW', 'Clutch']

px.bar(correlation_years,
       x=correlation_years.index,
       y=variable)

"""## Regression Model Development"""

#@title Scatter Plot

y = 'Guarantee' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']
x = 'HR' #@param ['Year', 'Player', 'Position', 'Age', 'Old Club', 'New Club', 'Years','Guarantee', 'Term', 'Player Agent', 'Club Owner','Baseball Ops head / club GM', 'Future WAR', 'Unnamed: 13', 'past WAR','HR', 'RBI', 'IBB', 'SB', 'AVG', 'BB%', 'K%', 'BB/K', 'OBP', 'SLG','OPS', 'ISO', 'BABIP', 'wOBA', 'wRAA', 'wRC', 'RAR', 'Spd', 'wRC+','WPA', 'RE24', 'REW', 'Clutch']

# Scatter plots

px.scatter(hitters,
       x= x,
       y= y,
       color='Year',
       hover_data=['Player', 'Guarantee', 'Position']
       )

"""### Developing OLS Regression Model for Contract Amount"""

# Spliting data into X and Y
#Note: This analysis can be done with Future WAR as the dependent variable instead of Guarantee

X = hitters.drop(columns=['Guarantee'])
y = hitters['Guarantee']

# Dropping non-relevant varibales

variables_drop = ['Year', 'Years', 'Future WAR', 'Term', 'Player', 'Position', 'New Club', 'Player Agent', 'Club Owner', 'Old Club', 'Baseball Ops head / club GM']

X.drop(columns=variables_drop, inplace=True)

X

#Testing for multicollinearity by analyzig VIF values. 
# VIF dataframe 
vif_data = pd.DataFrame() 
vif_data["variable"] = X.columns 
  
# calculating VIF for each variable 
vif_data["VIF"] = [variance_inflation_factor(X.values, i) 
                          for i in range(len(X.columns))]

vif_data

# Dropping variables that show multicollinearity and seem to be insignificant

variables_drop = ['Clutch', 'REW','RE24','wRC+','Spd','wRAA','wOBA','BABIP','ISO','OPS','BB/K','K%','BB%','AVG','SB','RBI','past WAR','Age']

X.drop(columns=variables_drop, inplace=True)

# One hot encoding categorical variables using get_dummies

X_encoded = pd.get_dummies(X, drop_first=True)
# X_encoded = X.copy()

# Filling missing values with median values

for column in X_encoded.columns:
  median = X_encoded[column].median()
  X_encoded[column].fillna(median, inplace=True)

# Creating a train and test set

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=0)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Normalizing the data

for column in X_train.columns:
  X_train[column] = (X_train[column] - X_train[column].mean()) / X_train[column].std()

X_train

# Applying constant and creating the model

X_train_sm = sm.add_constant(X_train)

model = sm.OLS(y_train, X_train_sm).fit()

print(model.summary())

"""### Developing Machine Learning Model with Pycaret for Contract Amount"""

hitters.columns

# Preparing the training data

setup(hitters, 
      target='Guarantee',
      # numeric_features = ['Years', 'HR', 'HBP', 'WP', 'W'],
      numeric_features = ['Age'],
      ignore_features = ['Player',
                         'Future WAR',
                         'Years',
                         'Term'],
      normalize = True, 
      normalize_method = 'zscore',
      )

#Comparing performance of different machine learning models
compare_models()

# Putting results into a dataframe

dataframe_model_comparison = pull()

dataframe_model_comparison.to_excel('model_comparison.xlsx')

dataframe_model_comparison

# Choosing Random Forest Model
model = create_model('rf')

#Generating feature importance plot
plot_model(model, plot = 'variable')

# Putting results of model fitting into a dataframe

model_fitting_df = pull()

model_fitting_df.to_excel('model_fitting.xlsx')

model_fitting_df

plot_model(model, plot = 'feature')

# Generating importance plot from 1999-2004

years = (1999, 2004)

hitters_ml = hitters[hitters['Year'] >= start]
hitters_ml = hitters_ml[hitters_ml['Year'] <= end]

setup(hitters_ml, 
    target='Guarantee',
    # numeric_features = ['Years', 'HR', 'HBP', 'WP', 'W'],
    numeric_features = ['Age'],
    ignore_features = ['Player',
                        'Future WAR',
                        'Years',
                        'Unnamed: 13',
                        'Term'],
    normalize = True, 
    normalize_method = 'zscore',
    silent = True,
    verbose = False)

model = create_model('rf',
                      verbose = False)

print("Importance plot for years 1999, 2004")

plot_model(model, plot = 'feature')

#Generating importance plot from 2005-2010
years = (2005, 2010)

hitters_ml = hitters[hitters['Year'] >= start]
hitters_ml = hitters_ml[hitters_ml['Year'] <= end]

setup(hitters_ml, 
    target='Guarantee',
    # numeric_features = ['Years', 'HR', 'HBP', 'WP', 'W'],
    numeric_features = ['Age'],
    ignore_features = ['Player',
                        'Future WAR',
                        'Years',
                        'Unnamed: 13',
                        'Term'],
    normalize = True, 
    normalize_method = 'zscore',
    silent = True,
    verbose = False)

model = create_model('rf',
                      verbose = False)

print("Importance plot for years 2005, 2010")

plot_model(model, plot = 'feature')

# Generating importnace plot for the full time period
years = (1999, 2019)

hitters_ml = hitters[hitters['Year'] >= start]
hitters_ml = hitters_ml[hitters_ml['Year'] <= end]

setup(hitters_ml, 
    target='Guarantee',
    # numeric_features = ['Years', 'HR', 'HBP', 'WP', 'W'],
    numeric_features = ['Age'],
    ignore_features = ['Player',
                        'Future WAR',
                        'Years',
                        'Unnamed: 13',
                        'Term'],
    normalize = True, 
    normalize_method = 'zscore',
    silent = True,
    verbose = False)

model = create_model('rf',
                      verbose = False)

print("Importance plot for years 1999, 2019")

plot_model(model, plot = 'feature')

"""### Developing Machine Learning Model with Pycaret for Future WAR"""

# Preparing the training data


setup(hitters, 
      target='Future WAR',
      # numeric_features = ['Years', 'HR', 'HBP', 'WP', 'W'],
      numeric_features = ['Age'],
      ignore_features = ['Player',
                         'Years',
                         'Unnamed: 13',
                         'Term'],
      normalize = True, 
      normalize_method = 'zscore',
      )

#Comparing models
compare_models()